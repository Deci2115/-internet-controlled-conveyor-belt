Porgram działania 2 silników z możliwością sterowania przez serwer internetowy 

//Biblioteki wykorzystane do połączenia się z ESP8266 
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>

//poniższe komenty umożliwiają nam dostęp do sieci WI-Fi 
const char* ssid = "login";
const char* password = "hasło";

//Przypisanie odpowiednich pinów do płytki 
int ENA_pin = D7;
int ENB_pin = D8;
int IN1 = D1;
int IN2 = D2;
int IN3 = D3;
int IN4 = D4;

//Zadeklarowanie zmiennych to odpowiedniego działania silników 
String slider_value = "0";
String slider_value2 = "0";
const char* input_parameter = "value";
const char* input_parameter2 = "value2";


//łaczenie z siecią na porcie 80 
AsyncWebServer server(80);
////kod HTML , ccs i javascrit który opisuje nam wygląd stroy oraz zasadę działania tej strony 
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>DC Motors Speed Control Web Server</title>
  <style>
    html {font-family: Times New Roman; display: inline-block; text-align: center;}
    h2 {font-size: 2.3rem;}
    h4 {font-size: 1.8rem;}
    p {font-size: 2.0rem;}
    body {max-width: 400px; margin:0px auto; padding-bottom: 25px;}
    .slider { -webkit-appearance: none; margin: 14px; width: 360px; height: 25px; background: #FF0000;
      outline: none; -webkit-transition: .2s; transition: opacity .2s;}
    .slider::-webkit-slider-thumb {-webkit-appearance: none; appearance: none; width: 35px; height: 35px; background:#01070a; cursor: pointer;}
    .slider::-moz-range-thumb { width: 35px; height: 35px; background: #01070a; cursor: pointer; } 
    
    .slider2 { -webkit-appearance: none; margin: 14px; width: 360px; height: 25px; background: #FF0000;
      outline: none; -webkit-transition: .2s; transition: opacity .2s;}
    .slider2::-webkit-slider-thumb {-webkit-appearance: none; appearance: none; width: 35px; height: 35px; background:#01070a; cursor: pointer;}
    .slider2::-moz-range-thumb { width: 35px; height: 35px; background: #01070a; cursor: pointer; } 
  </style>
</head>
<body>
  <h2>DC Motor Speed Control Web Server</h2>
  <h4>Silnik 1</h4>
  <p><span id="textslider_value">%SLIDERVALUE%</span></p>
  <p><input type="range" onchange="updateSliderPWM(this)" id="pwmSlider" min="0" max="255" value="%SLIDERVALUE%" step="1" class="slider"></p>
  
  <br/>
  <h4>Silnik 2</h4>
  <p><span id="textslider_value2">%SLIDERVALUE2%</span></p>
  <p><input type="range" onchange="updateSliderPWM2(this)" id="pwmSlider2" min="0" max="255" value="%SLIDERVALUE2%" step="1" class="slider2"></p>
  
<script>
function updateSliderPWM(element) {
  var slider_value = document.getElementById("pwmSlider").value;
  document.getElementById("textslider_value").innerHTML = slider_value;
  console.log(slider_value);
  var xhr = new XMLHttpRequest();
  xhr.open("GET", "/slider?value="+slider_value, true);
  xhr.send();
  
}
function updateSliderPWM2(element) {
  var slider_value2 = document.getElementById("pwmSlider2").value;
  document.getElementById("textslider_value2").innerHTML = slider_value2;
  console.log(slider_value2);
  var xhr2 = new XMLHttpRequest();
  xhr2.open("GET", "/slider?value2="+slider_value2, true);
  xhr2.send();
}

</script>
</body>
</html>
)rawliteral";

// Przypisywanie wartości suwaka do zmiennej 
String processor(const String& var){
  if (var == "SLIDERVALUE"){
    return slider_value;
  }else if(var=="SLIDERVALUE2"){
    return slider_value2;
  }else{
  return String();
  }
}

//Zasada działania silników 
void setup(){
  Serial.begin(115200);
  delay(1000);
  pinMode(ENA_pin, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENB_pin, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  
  analogWrite(ENA_pin, slider_value.toInt());
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(ENB_pin, slider_value2.toInt());
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting...");
  }

  Serial.println(WiFi.localIP());

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });

  server.on("/slider", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String message;
    if (request->hasParam(input_parameter)) {
      message = request->getParam(input_parameter)->value();
      slider_value = message;
      analogWrite(ENA_pin, slider_value.toInt());
        digitalWrite(IN1, HIGH);
        digitalWrite(IN2, LOW);
    }else if (request->hasParam(input_parameter2)) {
      message = request->getParam(input_parameter2)->value();
      slider_value2 = message;
      analogWrite(ENB_pin, slider_value2.toInt());
        digitalWrite(IN3, HIGH);
        digitalWrite(IN4, LOW);
    }else{
      message = "No message sent";
    }
    Serial.println(message);
    request->send(200, "text/plain", "OK");
  });
  
  server.begin();
}
  void loop() {
  
}

